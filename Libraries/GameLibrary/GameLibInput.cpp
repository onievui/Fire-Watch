//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file   GameLibInput.cpp
//!
//! @brief  入力関連の機能のソースファイル
//!
//! @date   2018/10/20
//!
//! @author S.Takaki
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// ヘッダファイルの読み込み ================================================
#include "GameLibInput.h"

#include <DxLib.h>




// <InputDeviceクラス> *********************************************************

// メンバ関数の定義 ========================================================
//----------------------------------------------------------------------
//! @brief デフォルトコンストラクタ
//!
//! @param[in] なし
//----------------------------------------------------------------------
InputDevice::InputDevice()
	: m_current_state(0)
	, m_last_state(0)
{
}



//----------------------------------------------------------------------
//! @brief デストラクタ
//----------------------------------------------------------------------
InputDevice::~InputDevice()
{
}



//----------------------------------------------------------------------
//! @brief 指定されたボタンが押されているかどうかを判断
//!
//! @param[in] button 判定したいボタンの入力マスク
//!
//! @retval true  指定されたボタンが押されている場合
//! @retval false それ以外の場合
//----------------------------------------------------------------------
bool InputDevice::IsButtonDown(int button)
{
	if ((m_current_state & button) == button)
	{
		return true;
	}
	else
	{
		return false;
	}
}



//----------------------------------------------------------------------
//! @brief 指定されたボタンが押されていないかどうかを判断
//!
//! @param[in] button 判定したいボタンの入力マスク
//!
//! @retval true  指定されたボタンが押されていない場合
//! @retval false それ以外の場合
//----------------------------------------------------------------------
bool InputDevice::IsButtonUp(int button)
{
	if ((m_current_state & button) != button)
	{
		return true;
	}
	else
	{
		return false;
	}
}



//----------------------------------------------------------------------
//! @brief 指定されたボタンが押されたかどうかを判断
//!
//! @param[in] button 判定したいボタンの入力マスク
//!
//! @retval true  指定されたキーが押された場合
//! @retval false それ以外の場合
//----------------------------------------------------------------------
bool InputDevice::IsButtonPressed(int button)
{
	if (((~m_last_state & m_current_state) & button) == button)
	{
		return true;
	}
	else
	{
		return false;
	}
}



//----------------------------------------------------------------------
//! @brief 指定されたボタンが離されたかどうかを判断
//!
//! @param[in] button 判定したいボタンの入力マスク
//!
//! @retval true  指定されたキーが離された場合
//! @retval false それ以外の場合
//----------------------------------------------------------------------
bool InputDevice::IsButtonReleased(int button)
{
	if (((m_last_state & ~m_current_state) & button) == button)
	{
		return true;
	}
	else
	{
		return false;
	}
}



// <Joypadクラス> **************************************************************

// メンバ関数の定義 ========================================================
//----------------------------------------------------------------------
//! @brief デフォルトコンストラクタ
//!
//! @param[in] なし
//----------------------------------------------------------------------
Joypad::Joypad(int pad_id)
	: InputDevice()
	, m_id(pad_id)
{
}



//----------------------------------------------------------------------
//! @brief デストラクタ
//----------------------------------------------------------------------
Joypad::~Joypad()
{
}




//----------------------------------------------------------------------
//! @brief ジョイパッドの入力状態の更新処理
//!
//! @param[in] なし
//!
//! @return なし
//----------------------------------------------------------------------
void Joypad::Update(void)
{
	// 状態の履歴を保存
	m_last_state = m_current_state;


	// ゲームパッドの状態を更新
	m_current_state = GetJoypadInputState(m_id);
}




// <Mouseクラス> ***************************************************************

// メンバ関数の定義 ========================================================
//----------------------------------------------------------------------
//! @brief デフォルトコンストラクタ
//!
//! @param[in] なし
//----------------------------------------------------------------------
Mouse::Mouse()
	: InputDevice()
	, m_position(Point2D{0.0f, 0.0f})
{
}



//----------------------------------------------------------------------
//! @brief デストラクタ
//----------------------------------------------------------------------
Mouse::~Mouse()
{
}



//------------------------------------------------------------------
//! @brief マウスの入力状態の更新処理
//!
//! @param[in] なし
//!
//! @return なし
//------------------------------------------------------------------
void Mouse::Update()
{
	// 状態の履歴を保存
	m_last_state = m_current_state;


	// マウスの状態を更新
	m_current_state = GetMouseInput();


	// マウスの座標を更新
	int pos_x, pos_y;
	GetMousePoint(&pos_x, &pos_y);

	m_position.x = static_cast<float>(pos_x);
	m_position.y = static_cast<float>(pos_y);
}



//------------------------------------------------------------------
//! @brief マウスの座標の取得
//!
//! @param[in] なし
//!
//! @return マウスの座標
//------------------------------------------------------------------
const Point2D& Mouse::GetPosition()
{
	return m_position;
}